import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
    outfile: "C:\\perlite-sync-test\\.obsidian\\plugins\\PerliteSync\\main.js",
	minify: prod,
	plugins: [{
		name: "copy-assets",
		setup(build) {
			build.onEnd(async () => {
				const fs = await import("fs");
				const path = await import("path");
				
				// 确保目录存在
                const outDir = "C:\\perlite-sync-test\\.obsidian\\plugins\\PerliteSync";
				if (!fs.existsSync(outDir)) {
					fs.mkdirSync(outDir, { recursive: true });
				}

				// 复制样式表
				fs.copyFileSync(
                    path.resolve("src/styles.css"),
					path.resolve(outDir, "styles.css")
				);
				
				// 复制清单文件
				fs.copyFileSync(
					path.resolve("manifest.json"),
					path.resolve(outDir, "manifest.json")
				);
			});
		}
	}]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
